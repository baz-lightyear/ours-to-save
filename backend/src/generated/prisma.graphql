# source: https://ours-to-save-prod-e8112953ab.herokuapp.com
# timestamp: Tue Aug 11 2020 14:44:43 GMT+0100 (British Summer Time)

type AggregateFeature {
  count: Int!
}

type AggregateFeatureComment {
  count: Int!
}

type AggregateStory {
  count: Int!
}

type AggregateStoryComment {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Feature implements Node {
  id: ID!
  title: String
  subtitle: String
  createdAt: DateTime!
  updatedAt: DateTime!
  author: String
  bio: String
  content: String
  approved: Boolean
  featuredImage: String
  address: String
  longitude: Float
  latitude: Float
  category: String
  leading: Boolean
  comments(where: FeatureCommentWhereInput, orderBy: FeatureCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FeatureComment!]
}

type FeatureComment implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User
  approved: Boolean
  content: String
  feature: Feature
}

"""A connection to a list of items."""
type FeatureCommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeatureCommentEdge]!
  aggregate: AggregateFeatureComment!
}

input FeatureCommentCreateInput {
  id: ID
  approved: Boolean
  content: String
  author: UserCreateOneWithoutFeatureCommentsInput
  feature: FeatureCreateOneWithoutCommentsInput
}

input FeatureCommentCreateManyWithoutAuthorInput {
  create: [FeatureCommentCreateWithoutAuthorInput!]
  connect: [FeatureCommentWhereUniqueInput!]
}

input FeatureCommentCreateManyWithoutFeatureInput {
  create: [FeatureCommentCreateWithoutFeatureInput!]
  connect: [FeatureCommentWhereUniqueInput!]
}

input FeatureCommentCreateWithoutAuthorInput {
  id: ID
  approved: Boolean
  content: String
  feature: FeatureCreateOneWithoutCommentsInput
}

input FeatureCommentCreateWithoutFeatureInput {
  id: ID
  approved: Boolean
  content: String
  author: UserCreateOneWithoutFeatureCommentsInput
}

"""An edge in a connection."""
type FeatureCommentEdge {
  """The item at the end of the edge."""
  node: FeatureComment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FeatureCommentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  approved_ASC
  approved_DESC
  content_ASC
  content_DESC
}

type FeatureCommentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  approved: Boolean
  content: String
}

input FeatureCommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FeatureCommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeatureCommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeatureCommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
}

type FeatureCommentSubscriptionPayload {
  mutation: MutationType!
  node: FeatureComment
  updatedFields: [String!]
  previousValues: FeatureCommentPreviousValues
}

input FeatureCommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FeatureCommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeatureCommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeatureCommentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FeatureCommentWhereInput
}

input FeatureCommentUpdateInput {
  approved: Boolean
  content: String
  author: UserUpdateOneWithoutFeatureCommentsInput
  feature: FeatureUpdateOneWithoutCommentsInput
}

input FeatureCommentUpdateManyDataInput {
  approved: Boolean
  content: String
}

input FeatureCommentUpdateManyMutationInput {
  approved: Boolean
  content: String
}

input FeatureCommentUpdateManyWithoutAuthorInput {
  create: [FeatureCommentCreateWithoutAuthorInput!]
  connect: [FeatureCommentWhereUniqueInput!]
  set: [FeatureCommentWhereUniqueInput!]
  disconnect: [FeatureCommentWhereUniqueInput!]
  delete: [FeatureCommentWhereUniqueInput!]
  update: [FeatureCommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [FeatureCommentUpdateManyWithWhereNestedInput!]
  deleteMany: [FeatureCommentScalarWhereInput!]
  upsert: [FeatureCommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input FeatureCommentUpdateManyWithoutFeatureInput {
  create: [FeatureCommentCreateWithoutFeatureInput!]
  connect: [FeatureCommentWhereUniqueInput!]
  set: [FeatureCommentWhereUniqueInput!]
  disconnect: [FeatureCommentWhereUniqueInput!]
  delete: [FeatureCommentWhereUniqueInput!]
  update: [FeatureCommentUpdateWithWhereUniqueWithoutFeatureInput!]
  updateMany: [FeatureCommentUpdateManyWithWhereNestedInput!]
  deleteMany: [FeatureCommentScalarWhereInput!]
  upsert: [FeatureCommentUpsertWithWhereUniqueWithoutFeatureInput!]
}

input FeatureCommentUpdateManyWithWhereNestedInput {
  where: FeatureCommentScalarWhereInput!
  data: FeatureCommentUpdateManyDataInput!
}

input FeatureCommentUpdateWithoutAuthorDataInput {
  approved: Boolean
  content: String
  feature: FeatureUpdateOneWithoutCommentsInput
}

input FeatureCommentUpdateWithoutFeatureDataInput {
  approved: Boolean
  content: String
  author: UserUpdateOneWithoutFeatureCommentsInput
}

input FeatureCommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: FeatureCommentWhereUniqueInput!
  data: FeatureCommentUpdateWithoutAuthorDataInput!
}

input FeatureCommentUpdateWithWhereUniqueWithoutFeatureInput {
  where: FeatureCommentWhereUniqueInput!
  data: FeatureCommentUpdateWithoutFeatureDataInput!
}

input FeatureCommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: FeatureCommentWhereUniqueInput!
  update: FeatureCommentUpdateWithoutAuthorDataInput!
  create: FeatureCommentCreateWithoutAuthorInput!
}

input FeatureCommentUpsertWithWhereUniqueWithoutFeatureInput {
  where: FeatureCommentWhereUniqueInput!
  update: FeatureCommentUpdateWithoutFeatureDataInput!
  create: FeatureCommentCreateWithoutFeatureInput!
}

input FeatureCommentWhereInput {
  """Logical AND on all given filters."""
  AND: [FeatureCommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeatureCommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeatureCommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  author: UserWhereInput
  feature: FeatureWhereInput
}

input FeatureCommentWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type FeatureConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeatureEdge]!
  aggregate: AggregateFeature!
}

input FeatureCreateInput {
  id: ID
  title: String
  subtitle: String
  author: String
  bio: String
  content: String
  approved: Boolean
  featuredImage: String
  address: String
  longitude: Float
  latitude: Float
  category: String
  leading: Boolean
  comments: FeatureCommentCreateManyWithoutFeatureInput
}

input FeatureCreateOneWithoutCommentsInput {
  create: FeatureCreateWithoutCommentsInput
  connect: FeatureWhereUniqueInput
}

input FeatureCreateWithoutCommentsInput {
  id: ID
  title: String
  subtitle: String
  author: String
  bio: String
  content: String
  approved: Boolean
  featuredImage: String
  address: String
  longitude: Float
  latitude: Float
  category: String
  leading: Boolean
}

"""An edge in a connection."""
type FeatureEdge {
  """The item at the end of the edge."""
  node: Feature!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FeatureOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  subtitle_ASC
  subtitle_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  author_ASC
  author_DESC
  bio_ASC
  bio_DESC
  content_ASC
  content_DESC
  approved_ASC
  approved_DESC
  featuredImage_ASC
  featuredImage_DESC
  address_ASC
  address_DESC
  longitude_ASC
  longitude_DESC
  latitude_ASC
  latitude_DESC
  category_ASC
  category_DESC
  leading_ASC
  leading_DESC
}

type FeaturePreviousValues {
  id: ID!
  title: String
  subtitle: String
  createdAt: DateTime!
  updatedAt: DateTime!
  author: String
  bio: String
  content: String
  approved: Boolean
  featuredImage: String
  address: String
  longitude: Float
  latitude: Float
  category: String
  leading: Boolean
}

type FeatureSubscriptionPayload {
  mutation: MutationType!
  node: Feature
  updatedFields: [String!]
  previousValues: FeaturePreviousValues
}

input FeatureSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FeatureSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeatureSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeatureSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FeatureWhereInput
}

input FeatureUpdateInput {
  title: String
  subtitle: String
  author: String
  bio: String
  content: String
  approved: Boolean
  featuredImage: String
  address: String
  longitude: Float
  latitude: Float
  category: String
  leading: Boolean
  comments: FeatureCommentUpdateManyWithoutFeatureInput
}

input FeatureUpdateManyMutationInput {
  title: String
  subtitle: String
  author: String
  bio: String
  content: String
  approved: Boolean
  featuredImage: String
  address: String
  longitude: Float
  latitude: Float
  category: String
  leading: Boolean
}

input FeatureUpdateOneWithoutCommentsInput {
  create: FeatureCreateWithoutCommentsInput
  connect: FeatureWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FeatureUpdateWithoutCommentsDataInput
  upsert: FeatureUpsertWithoutCommentsInput
}

input FeatureUpdateWithoutCommentsDataInput {
  title: String
  subtitle: String
  author: String
  bio: String
  content: String
  approved: Boolean
  featuredImage: String
  address: String
  longitude: Float
  latitude: Float
  category: String
  leading: Boolean
}

input FeatureUpsertWithoutCommentsInput {
  update: FeatureUpdateWithoutCommentsDataInput!
  create: FeatureCreateWithoutCommentsInput!
}

input FeatureWhereInput {
  """Logical AND on all given filters."""
  AND: [FeatureWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeatureWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeatureWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  subtitle: String

  """All values that are not equal to given value."""
  subtitle_not: String

  """All values that are contained in given list."""
  subtitle_in: [String!]

  """All values that are not contained in given list."""
  subtitle_not_in: [String!]

  """All values less than the given value."""
  subtitle_lt: String

  """All values less than or equal the given value."""
  subtitle_lte: String

  """All values greater than the given value."""
  subtitle_gt: String

  """All values greater than or equal the given value."""
  subtitle_gte: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values starting with the given string."""
  subtitle_starts_with: String

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values not ending with the given string."""
  subtitle_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: String

  """All values that are not equal to given value."""
  author_not: String

  """All values that are contained in given list."""
  author_in: [String!]

  """All values that are not contained in given list."""
  author_not_in: [String!]

  """All values less than the given value."""
  author_lt: String

  """All values less than or equal the given value."""
  author_lte: String

  """All values greater than the given value."""
  author_gt: String

  """All values greater than or equal the given value."""
  author_gte: String

  """All values containing the given string."""
  author_contains: String

  """All values not containing the given string."""
  author_not_contains: String

  """All values starting with the given string."""
  author_starts_with: String

  """All values not starting with the given string."""
  author_not_starts_with: String

  """All values ending with the given string."""
  author_ends_with: String

  """All values not ending with the given string."""
  author_not_ends_with: String
  bio: String

  """All values that are not equal to given value."""
  bio_not: String

  """All values that are contained in given list."""
  bio_in: [String!]

  """All values that are not contained in given list."""
  bio_not_in: [String!]

  """All values less than the given value."""
  bio_lt: String

  """All values less than or equal the given value."""
  bio_lte: String

  """All values greater than the given value."""
  bio_gt: String

  """All values greater than or equal the given value."""
  bio_gte: String

  """All values containing the given string."""
  bio_contains: String

  """All values not containing the given string."""
  bio_not_contains: String

  """All values starting with the given string."""
  bio_starts_with: String

  """All values not starting with the given string."""
  bio_not_starts_with: String

  """All values ending with the given string."""
  bio_ends_with: String

  """All values not ending with the given string."""
  bio_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  featuredImage: String

  """All values that are not equal to given value."""
  featuredImage_not: String

  """All values that are contained in given list."""
  featuredImage_in: [String!]

  """All values that are not contained in given list."""
  featuredImage_not_in: [String!]

  """All values less than the given value."""
  featuredImage_lt: String

  """All values less than or equal the given value."""
  featuredImage_lte: String

  """All values greater than the given value."""
  featuredImage_gt: String

  """All values greater than or equal the given value."""
  featuredImage_gte: String

  """All values containing the given string."""
  featuredImage_contains: String

  """All values not containing the given string."""
  featuredImage_not_contains: String

  """All values starting with the given string."""
  featuredImage_starts_with: String

  """All values not starting with the given string."""
  featuredImage_not_starts_with: String

  """All values ending with the given string."""
  featuredImage_ends_with: String

  """All values not ending with the given string."""
  featuredImage_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  longitude: Float

  """All values that are not equal to given value."""
  longitude_not: Float

  """All values that are contained in given list."""
  longitude_in: [Float!]

  """All values that are not contained in given list."""
  longitude_not_in: [Float!]

  """All values less than the given value."""
  longitude_lt: Float

  """All values less than or equal the given value."""
  longitude_lte: Float

  """All values greater than the given value."""
  longitude_gt: Float

  """All values greater than or equal the given value."""
  longitude_gte: Float
  latitude: Float

  """All values that are not equal to given value."""
  latitude_not: Float

  """All values that are contained in given list."""
  latitude_in: [Float!]

  """All values that are not contained in given list."""
  latitude_not_in: [Float!]

  """All values less than the given value."""
  latitude_lt: Float

  """All values less than or equal the given value."""
  latitude_lte: Float

  """All values greater than the given value."""
  latitude_gt: Float

  """All values greater than or equal the given value."""
  latitude_gte: Float
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  leading: Boolean

  """All values that are not equal to given value."""
  leading_not: Boolean
  comments_every: FeatureCommentWhereInput
  comments_some: FeatureCommentWhereInput
  comments_none: FeatureCommentWhereInput
}

input FeatureWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createFeatureComment(data: FeatureCommentCreateInput!): FeatureComment!
  createStoryComment(data: StoryCommentCreateInput!): StoryComment!
  createFeature(data: FeatureCreateInput!): Feature!
  createStory(data: StoryCreateInput!): Story!
  createUser(data: UserCreateInput!): User!
  updateFeatureComment(data: FeatureCommentUpdateInput!, where: FeatureCommentWhereUniqueInput!): FeatureComment
  updateStoryComment(data: StoryCommentUpdateInput!, where: StoryCommentWhereUniqueInput!): StoryComment
  updateFeature(data: FeatureUpdateInput!, where: FeatureWhereUniqueInput!): Feature
  updateStory(data: StoryUpdateInput!, where: StoryWhereUniqueInput!): Story
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteFeatureComment(where: FeatureCommentWhereUniqueInput!): FeatureComment
  deleteStoryComment(where: StoryCommentWhereUniqueInput!): StoryComment
  deleteFeature(where: FeatureWhereUniqueInput!): Feature
  deleteStory(where: StoryWhereUniqueInput!): Story
  deleteUser(where: UserWhereUniqueInput!): User
  upsertFeatureComment(where: FeatureCommentWhereUniqueInput!, create: FeatureCommentCreateInput!, update: FeatureCommentUpdateInput!): FeatureComment!
  upsertStoryComment(where: StoryCommentWhereUniqueInput!, create: StoryCommentCreateInput!, update: StoryCommentUpdateInput!): StoryComment!
  upsertFeature(where: FeatureWhereUniqueInput!, create: FeatureCreateInput!, update: FeatureUpdateInput!): Feature!
  upsertStory(where: StoryWhereUniqueInput!, create: StoryCreateInput!, update: StoryUpdateInput!): Story!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyFeatureComments(data: FeatureCommentUpdateManyMutationInput!, where: FeatureCommentWhereInput): BatchPayload!
  updateManyStoryComments(data: StoryCommentUpdateManyMutationInput!, where: StoryCommentWhereInput): BatchPayload!
  updateManyFeatures(data: FeatureUpdateManyMutationInput!, where: FeatureWhereInput): BatchPayload!
  updateManyStories(data: StoryUpdateManyMutationInput!, where: StoryWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyFeatureComments(where: FeatureCommentWhereInput): BatchPayload!
  deleteManyStoryComments(where: StoryCommentWhereInput): BatchPayload!
  deleteManyFeatures(where: FeatureWhereInput): BatchPayload!
  deleteManyStories(where: StoryWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  EDITOR
  USER
  PREMIUM
}

type Query {
  featureComments(where: FeatureCommentWhereInput, orderBy: FeatureCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FeatureComment]!
  storyComments(where: StoryCommentWhereInput, orderBy: StoryCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StoryComment]!
  features(where: FeatureWhereInput, orderBy: FeatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feature]!
  stories(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Story]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  featureComment(where: FeatureCommentWhereUniqueInput!): FeatureComment
  storyComment(where: StoryCommentWhereUniqueInput!): StoryComment
  feature(where: FeatureWhereUniqueInput!): Feature
  story(where: StoryWhereUniqueInput!): Story
  user(where: UserWhereUniqueInput!): User
  featureCommentsConnection(where: FeatureCommentWhereInput, orderBy: FeatureCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeatureCommentConnection!
  storyCommentsConnection(where: StoryCommentWhereInput, orderBy: StoryCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StoryCommentConnection!
  featuresConnection(where: FeatureWhereInput, orderBy: FeatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeatureConnection!
  storiesConnection(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StoryConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Story implements Node {
  id: ID!
  title: String!
  content: String
  address: String
  longitude: Float
  latitude: Float
  morality: String
  createdAt: DateTime!
  updatedAt: DateTime!
  author: String
  interestedInFeatureEmail: String
  image: String
  approved: Boolean
  ourPick: Boolean
  feature: Boolean
  sponsored: Boolean
  leading: Boolean
  country: String
  countUpvotes: Int
  comments(where: StoryCommentWhereInput, orderBy: StoryCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StoryComment!]
}

type StoryComment implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User
  approved: Boolean
  content: String
  story: Story
}

"""A connection to a list of items."""
type StoryCommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StoryCommentEdge]!
  aggregate: AggregateStoryComment!
}

input StoryCommentCreateInput {
  id: ID
  approved: Boolean
  content: String
  author: UserCreateOneInput
  story: StoryCreateOneWithoutCommentsInput
}

input StoryCommentCreateManyWithoutStoryInput {
  create: [StoryCommentCreateWithoutStoryInput!]
  connect: [StoryCommentWhereUniqueInput!]
}

input StoryCommentCreateWithoutStoryInput {
  id: ID
  approved: Boolean
  content: String
  author: UserCreateOneInput
}

"""An edge in a connection."""
type StoryCommentEdge {
  """The item at the end of the edge."""
  node: StoryComment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StoryCommentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  approved_ASC
  approved_DESC
  content_ASC
  content_DESC
}

type StoryCommentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  approved: Boolean
  content: String
}

input StoryCommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StoryCommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StoryCommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StoryCommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
}

type StoryCommentSubscriptionPayload {
  mutation: MutationType!
  node: StoryComment
  updatedFields: [String!]
  previousValues: StoryCommentPreviousValues
}

input StoryCommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StoryCommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StoryCommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StoryCommentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StoryCommentWhereInput
}

input StoryCommentUpdateInput {
  approved: Boolean
  content: String
  author: UserUpdateOneInput
  story: StoryUpdateOneWithoutCommentsInput
}

input StoryCommentUpdateManyDataInput {
  approved: Boolean
  content: String
}

input StoryCommentUpdateManyMutationInput {
  approved: Boolean
  content: String
}

input StoryCommentUpdateManyWithoutStoryInput {
  create: [StoryCommentCreateWithoutStoryInput!]
  connect: [StoryCommentWhereUniqueInput!]
  set: [StoryCommentWhereUniqueInput!]
  disconnect: [StoryCommentWhereUniqueInput!]
  delete: [StoryCommentWhereUniqueInput!]
  update: [StoryCommentUpdateWithWhereUniqueWithoutStoryInput!]
  updateMany: [StoryCommentUpdateManyWithWhereNestedInput!]
  deleteMany: [StoryCommentScalarWhereInput!]
  upsert: [StoryCommentUpsertWithWhereUniqueWithoutStoryInput!]
}

input StoryCommentUpdateManyWithWhereNestedInput {
  where: StoryCommentScalarWhereInput!
  data: StoryCommentUpdateManyDataInput!
}

input StoryCommentUpdateWithoutStoryDataInput {
  approved: Boolean
  content: String
  author: UserUpdateOneInput
}

input StoryCommentUpdateWithWhereUniqueWithoutStoryInput {
  where: StoryCommentWhereUniqueInput!
  data: StoryCommentUpdateWithoutStoryDataInput!
}

input StoryCommentUpsertWithWhereUniqueWithoutStoryInput {
  where: StoryCommentWhereUniqueInput!
  update: StoryCommentUpdateWithoutStoryDataInput!
  create: StoryCommentCreateWithoutStoryInput!
}

input StoryCommentWhereInput {
  """Logical AND on all given filters."""
  AND: [StoryCommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [StoryCommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StoryCommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  author: UserWhereInput
  story: StoryWhereInput
}

input StoryCommentWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type StoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StoryEdge]!
  aggregate: AggregateStory!
}

input StoryCreateInput {
  id: ID
  title: String!
  content: String
  address: String
  longitude: Float
  latitude: Float
  morality: String
  author: String
  interestedInFeatureEmail: String
  image: String
  approved: Boolean
  ourPick: Boolean
  feature: Boolean
  sponsored: Boolean
  leading: Boolean
  country: String
  countUpvotes: Int
  comments: StoryCommentCreateManyWithoutStoryInput
}

input StoryCreateManyInput {
  create: [StoryCreateInput!]
  connect: [StoryWhereUniqueInput!]
}

input StoryCreateOneWithoutCommentsInput {
  create: StoryCreateWithoutCommentsInput
  connect: StoryWhereUniqueInput
}

input StoryCreateWithoutCommentsInput {
  id: ID
  title: String!
  content: String
  address: String
  longitude: Float
  latitude: Float
  morality: String
  author: String
  interestedInFeatureEmail: String
  image: String
  approved: Boolean
  ourPick: Boolean
  feature: Boolean
  sponsored: Boolean
  leading: Boolean
  country: String
  countUpvotes: Int
}

"""An edge in a connection."""
type StoryEdge {
  """The item at the end of the edge."""
  node: Story!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StoryOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  address_ASC
  address_DESC
  longitude_ASC
  longitude_DESC
  latitude_ASC
  latitude_DESC
  morality_ASC
  morality_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  author_ASC
  author_DESC
  interestedInFeatureEmail_ASC
  interestedInFeatureEmail_DESC
  image_ASC
  image_DESC
  approved_ASC
  approved_DESC
  ourPick_ASC
  ourPick_DESC
  feature_ASC
  feature_DESC
  sponsored_ASC
  sponsored_DESC
  leading_ASC
  leading_DESC
  country_ASC
  country_DESC
  countUpvotes_ASC
  countUpvotes_DESC
}

type StoryPreviousValues {
  id: ID!
  title: String!
  content: String
  address: String
  longitude: Float
  latitude: Float
  morality: String
  createdAt: DateTime!
  updatedAt: DateTime!
  author: String
  interestedInFeatureEmail: String
  image: String
  approved: Boolean
  ourPick: Boolean
  feature: Boolean
  sponsored: Boolean
  leading: Boolean
  country: String
  countUpvotes: Int
}

input StoryScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StoryScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StoryScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StoryScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  longitude: Float

  """All values that are not equal to given value."""
  longitude_not: Float

  """All values that are contained in given list."""
  longitude_in: [Float!]

  """All values that are not contained in given list."""
  longitude_not_in: [Float!]

  """All values less than the given value."""
  longitude_lt: Float

  """All values less than or equal the given value."""
  longitude_lte: Float

  """All values greater than the given value."""
  longitude_gt: Float

  """All values greater than or equal the given value."""
  longitude_gte: Float
  latitude: Float

  """All values that are not equal to given value."""
  latitude_not: Float

  """All values that are contained in given list."""
  latitude_in: [Float!]

  """All values that are not contained in given list."""
  latitude_not_in: [Float!]

  """All values less than the given value."""
  latitude_lt: Float

  """All values less than or equal the given value."""
  latitude_lte: Float

  """All values greater than the given value."""
  latitude_gt: Float

  """All values greater than or equal the given value."""
  latitude_gte: Float
  morality: String

  """All values that are not equal to given value."""
  morality_not: String

  """All values that are contained in given list."""
  morality_in: [String!]

  """All values that are not contained in given list."""
  morality_not_in: [String!]

  """All values less than the given value."""
  morality_lt: String

  """All values less than or equal the given value."""
  morality_lte: String

  """All values greater than the given value."""
  morality_gt: String

  """All values greater than or equal the given value."""
  morality_gte: String

  """All values containing the given string."""
  morality_contains: String

  """All values not containing the given string."""
  morality_not_contains: String

  """All values starting with the given string."""
  morality_starts_with: String

  """All values not starting with the given string."""
  morality_not_starts_with: String

  """All values ending with the given string."""
  morality_ends_with: String

  """All values not ending with the given string."""
  morality_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: String

  """All values that are not equal to given value."""
  author_not: String

  """All values that are contained in given list."""
  author_in: [String!]

  """All values that are not contained in given list."""
  author_not_in: [String!]

  """All values less than the given value."""
  author_lt: String

  """All values less than or equal the given value."""
  author_lte: String

  """All values greater than the given value."""
  author_gt: String

  """All values greater than or equal the given value."""
  author_gte: String

  """All values containing the given string."""
  author_contains: String

  """All values not containing the given string."""
  author_not_contains: String

  """All values starting with the given string."""
  author_starts_with: String

  """All values not starting with the given string."""
  author_not_starts_with: String

  """All values ending with the given string."""
  author_ends_with: String

  """All values not ending with the given string."""
  author_not_ends_with: String
  interestedInFeatureEmail: String

  """All values that are not equal to given value."""
  interestedInFeatureEmail_not: String

  """All values that are contained in given list."""
  interestedInFeatureEmail_in: [String!]

  """All values that are not contained in given list."""
  interestedInFeatureEmail_not_in: [String!]

  """All values less than the given value."""
  interestedInFeatureEmail_lt: String

  """All values less than or equal the given value."""
  interestedInFeatureEmail_lte: String

  """All values greater than the given value."""
  interestedInFeatureEmail_gt: String

  """All values greater than or equal the given value."""
  interestedInFeatureEmail_gte: String

  """All values containing the given string."""
  interestedInFeatureEmail_contains: String

  """All values not containing the given string."""
  interestedInFeatureEmail_not_contains: String

  """All values starting with the given string."""
  interestedInFeatureEmail_starts_with: String

  """All values not starting with the given string."""
  interestedInFeatureEmail_not_starts_with: String

  """All values ending with the given string."""
  interestedInFeatureEmail_ends_with: String

  """All values not ending with the given string."""
  interestedInFeatureEmail_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  ourPick: Boolean

  """All values that are not equal to given value."""
  ourPick_not: Boolean
  feature: Boolean

  """All values that are not equal to given value."""
  feature_not: Boolean
  sponsored: Boolean

  """All values that are not equal to given value."""
  sponsored_not: Boolean
  leading: Boolean

  """All values that are not equal to given value."""
  leading_not: Boolean
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  countUpvotes: Int

  """All values that are not equal to given value."""
  countUpvotes_not: Int

  """All values that are contained in given list."""
  countUpvotes_in: [Int!]

  """All values that are not contained in given list."""
  countUpvotes_not_in: [Int!]

  """All values less than the given value."""
  countUpvotes_lt: Int

  """All values less than or equal the given value."""
  countUpvotes_lte: Int

  """All values greater than the given value."""
  countUpvotes_gt: Int

  """All values greater than or equal the given value."""
  countUpvotes_gte: Int
}

type StorySubscriptionPayload {
  mutation: MutationType!
  node: Story
  updatedFields: [String!]
  previousValues: StoryPreviousValues
}

input StorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StorySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StoryWhereInput
}

input StoryUpdateDataInput {
  title: String
  content: String
  address: String
  longitude: Float
  latitude: Float
  morality: String
  author: String
  interestedInFeatureEmail: String
  image: String
  approved: Boolean
  ourPick: Boolean
  feature: Boolean
  sponsored: Boolean
  leading: Boolean
  country: String
  countUpvotes: Int
  comments: StoryCommentUpdateManyWithoutStoryInput
}

input StoryUpdateInput {
  title: String
  content: String
  address: String
  longitude: Float
  latitude: Float
  morality: String
  author: String
  interestedInFeatureEmail: String
  image: String
  approved: Boolean
  ourPick: Boolean
  feature: Boolean
  sponsored: Boolean
  leading: Boolean
  country: String
  countUpvotes: Int
  comments: StoryCommentUpdateManyWithoutStoryInput
}

input StoryUpdateManyDataInput {
  title: String
  content: String
  address: String
  longitude: Float
  latitude: Float
  morality: String
  author: String
  interestedInFeatureEmail: String
  image: String
  approved: Boolean
  ourPick: Boolean
  feature: Boolean
  sponsored: Boolean
  leading: Boolean
  country: String
  countUpvotes: Int
}

input StoryUpdateManyInput {
  create: [StoryCreateInput!]
  connect: [StoryWhereUniqueInput!]
  set: [StoryWhereUniqueInput!]
  disconnect: [StoryWhereUniqueInput!]
  delete: [StoryWhereUniqueInput!]
  update: [StoryUpdateWithWhereUniqueNestedInput!]
  updateMany: [StoryUpdateManyWithWhereNestedInput!]
  deleteMany: [StoryScalarWhereInput!]
  upsert: [StoryUpsertWithWhereUniqueNestedInput!]
}

input StoryUpdateManyMutationInput {
  title: String
  content: String
  address: String
  longitude: Float
  latitude: Float
  morality: String
  author: String
  interestedInFeatureEmail: String
  image: String
  approved: Boolean
  ourPick: Boolean
  feature: Boolean
  sponsored: Boolean
  leading: Boolean
  country: String
  countUpvotes: Int
}

input StoryUpdateManyWithWhereNestedInput {
  where: StoryScalarWhereInput!
  data: StoryUpdateManyDataInput!
}

input StoryUpdateOneWithoutCommentsInput {
  create: StoryCreateWithoutCommentsInput
  connect: StoryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StoryUpdateWithoutCommentsDataInput
  upsert: StoryUpsertWithoutCommentsInput
}

input StoryUpdateWithoutCommentsDataInput {
  title: String
  content: String
  address: String
  longitude: Float
  latitude: Float
  morality: String
  author: String
  interestedInFeatureEmail: String
  image: String
  approved: Boolean
  ourPick: Boolean
  feature: Boolean
  sponsored: Boolean
  leading: Boolean
  country: String
  countUpvotes: Int
}

input StoryUpdateWithWhereUniqueNestedInput {
  where: StoryWhereUniqueInput!
  data: StoryUpdateDataInput!
}

input StoryUpsertWithoutCommentsInput {
  update: StoryUpdateWithoutCommentsDataInput!
  create: StoryCreateWithoutCommentsInput!
}

input StoryUpsertWithWhereUniqueNestedInput {
  where: StoryWhereUniqueInput!
  update: StoryUpdateDataInput!
  create: StoryCreateInput!
}

input StoryWhereInput {
  """Logical AND on all given filters."""
  AND: [StoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [StoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  longitude: Float

  """All values that are not equal to given value."""
  longitude_not: Float

  """All values that are contained in given list."""
  longitude_in: [Float!]

  """All values that are not contained in given list."""
  longitude_not_in: [Float!]

  """All values less than the given value."""
  longitude_lt: Float

  """All values less than or equal the given value."""
  longitude_lte: Float

  """All values greater than the given value."""
  longitude_gt: Float

  """All values greater than or equal the given value."""
  longitude_gte: Float
  latitude: Float

  """All values that are not equal to given value."""
  latitude_not: Float

  """All values that are contained in given list."""
  latitude_in: [Float!]

  """All values that are not contained in given list."""
  latitude_not_in: [Float!]

  """All values less than the given value."""
  latitude_lt: Float

  """All values less than or equal the given value."""
  latitude_lte: Float

  """All values greater than the given value."""
  latitude_gt: Float

  """All values greater than or equal the given value."""
  latitude_gte: Float
  morality: String

  """All values that are not equal to given value."""
  morality_not: String

  """All values that are contained in given list."""
  morality_in: [String!]

  """All values that are not contained in given list."""
  morality_not_in: [String!]

  """All values less than the given value."""
  morality_lt: String

  """All values less than or equal the given value."""
  morality_lte: String

  """All values greater than the given value."""
  morality_gt: String

  """All values greater than or equal the given value."""
  morality_gte: String

  """All values containing the given string."""
  morality_contains: String

  """All values not containing the given string."""
  morality_not_contains: String

  """All values starting with the given string."""
  morality_starts_with: String

  """All values not starting with the given string."""
  morality_not_starts_with: String

  """All values ending with the given string."""
  morality_ends_with: String

  """All values not ending with the given string."""
  morality_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: String

  """All values that are not equal to given value."""
  author_not: String

  """All values that are contained in given list."""
  author_in: [String!]

  """All values that are not contained in given list."""
  author_not_in: [String!]

  """All values less than the given value."""
  author_lt: String

  """All values less than or equal the given value."""
  author_lte: String

  """All values greater than the given value."""
  author_gt: String

  """All values greater than or equal the given value."""
  author_gte: String

  """All values containing the given string."""
  author_contains: String

  """All values not containing the given string."""
  author_not_contains: String

  """All values starting with the given string."""
  author_starts_with: String

  """All values not starting with the given string."""
  author_not_starts_with: String

  """All values ending with the given string."""
  author_ends_with: String

  """All values not ending with the given string."""
  author_not_ends_with: String
  interestedInFeatureEmail: String

  """All values that are not equal to given value."""
  interestedInFeatureEmail_not: String

  """All values that are contained in given list."""
  interestedInFeatureEmail_in: [String!]

  """All values that are not contained in given list."""
  interestedInFeatureEmail_not_in: [String!]

  """All values less than the given value."""
  interestedInFeatureEmail_lt: String

  """All values less than or equal the given value."""
  interestedInFeatureEmail_lte: String

  """All values greater than the given value."""
  interestedInFeatureEmail_gt: String

  """All values greater than or equal the given value."""
  interestedInFeatureEmail_gte: String

  """All values containing the given string."""
  interestedInFeatureEmail_contains: String

  """All values not containing the given string."""
  interestedInFeatureEmail_not_contains: String

  """All values starting with the given string."""
  interestedInFeatureEmail_starts_with: String

  """All values not starting with the given string."""
  interestedInFeatureEmail_not_starts_with: String

  """All values ending with the given string."""
  interestedInFeatureEmail_ends_with: String

  """All values not ending with the given string."""
  interestedInFeatureEmail_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  ourPick: Boolean

  """All values that are not equal to given value."""
  ourPick_not: Boolean
  feature: Boolean

  """All values that are not equal to given value."""
  feature_not: Boolean
  sponsored: Boolean

  """All values that are not equal to given value."""
  sponsored_not: Boolean
  leading: Boolean

  """All values that are not equal to given value."""
  leading_not: Boolean
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  countUpvotes: Int

  """All values that are not equal to given value."""
  countUpvotes_not: Int

  """All values that are contained in given list."""
  countUpvotes_in: [Int!]

  """All values that are not contained in given list."""
  countUpvotes_not_in: [Int!]

  """All values less than the given value."""
  countUpvotes_lt: Int

  """All values less than or equal the given value."""
  countUpvotes_lte: Int

  """All values greater than the given value."""
  countUpvotes_gt: Int

  """All values greater than or equal the given value."""
  countUpvotes_gte: Int
  comments_every: StoryCommentWhereInput
  comments_some: StoryCommentWhereInput
  comments_none: StoryCommentWhereInput
}

input StoryWhereUniqueInput {
  id: ID
}

type Subscription {
  featureComment(where: FeatureCommentSubscriptionWhereInput): FeatureCommentSubscriptionPayload
  storyComment(where: StoryCommentSubscriptionWhereInput): StoryCommentSubscriptionPayload
  feature(where: FeatureSubscriptionWhereInput): FeatureSubscriptionPayload
  story(where: StorySubscriptionWhereInput): StorySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String
  email: String!
  phone: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  createdAt: DateTime
  updatedAt: DateTime
  featureComments(where: FeatureCommentWhereInput, orderBy: FeatureCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FeatureComment!]
  upvotedStories(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Story!]
  stripeCustomerId: String
  stripeBillingSessionUrl: String
  stripeCheckoutSessionId: String
  referredBy: User
  stripeCustomerBalance: Float
  cookieToken: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String
  email: String!
  phone: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  stripeCustomerId: String
  stripeBillingSessionUrl: String
  stripeCheckoutSessionId: String
  stripeCustomerBalance: Float
  cookieToken: String
  permissions: UserCreatepermissionsInput
  featureComments: FeatureCommentCreateManyWithoutAuthorInput
  upvotedStories: StoryCreateManyInput
  referredBy: UserCreateOneInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFeatureCommentsInput {
  create: UserCreateWithoutFeatureCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutFeatureCommentsInput {
  id: ID
  name: String
  email: String!
  phone: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  stripeCustomerId: String
  stripeBillingSessionUrl: String
  stripeCheckoutSessionId: String
  stripeCustomerBalance: Float
  cookieToken: String
  permissions: UserCreatepermissionsInput
  upvotedStories: StoryCreateManyInput
  referredBy: UserCreateOneInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  stripeCustomerId_ASC
  stripeCustomerId_DESC
  stripeBillingSessionUrl_ASC
  stripeBillingSessionUrl_DESC
  stripeCheckoutSessionId_ASC
  stripeCheckoutSessionId_DESC
  stripeCustomerBalance_ASC
  stripeCustomerBalance_DESC
  cookieToken_ASC
  cookieToken_DESC
}

type UserPreviousValues {
  id: ID!
  name: String
  email: String!
  phone: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeBillingSessionUrl: String
  stripeCheckoutSessionId: String
  stripeCustomerBalance: Float
  cookieToken: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  phone: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  stripeCustomerId: String
  stripeBillingSessionUrl: String
  stripeCheckoutSessionId: String
  stripeCustomerBalance: Float
  cookieToken: String
  permissions: UserUpdatepermissionsInput
  featureComments: FeatureCommentUpdateManyWithoutAuthorInput
  upvotedStories: StoryUpdateManyInput
  referredBy: UserUpdateOneInput
}

input UserUpdateInput {
  name: String
  email: String
  phone: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  stripeCustomerId: String
  stripeBillingSessionUrl: String
  stripeCheckoutSessionId: String
  stripeCustomerBalance: Float
  cookieToken: String
  permissions: UserUpdatepermissionsInput
  featureComments: FeatureCommentUpdateManyWithoutAuthorInput
  upvotedStories: StoryUpdateManyInput
  referredBy: UserUpdateOneInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  phone: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  stripeCustomerId: String
  stripeBillingSessionUrl: String
  stripeCheckoutSessionId: String
  stripeCustomerBalance: Float
  cookieToken: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutFeatureCommentsInput {
  create: UserCreateWithoutFeatureCommentsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutFeatureCommentsDataInput
  upsert: UserUpsertWithoutFeatureCommentsInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutFeatureCommentsDataInput {
  name: String
  email: String
  phone: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  stripeCustomerId: String
  stripeBillingSessionUrl: String
  stripeCheckoutSessionId: String
  stripeCustomerBalance: Float
  cookieToken: String
  permissions: UserUpdatepermissionsInput
  upvotedStories: StoryUpdateManyInput
  referredBy: UserUpdateOneInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutFeatureCommentsInput {
  update: UserUpdateWithoutFeatureCommentsDataInput!
  create: UserCreateWithoutFeatureCommentsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  stripeCustomerId: String

  """All values that are not equal to given value."""
  stripeCustomerId_not: String

  """All values that are contained in given list."""
  stripeCustomerId_in: [String!]

  """All values that are not contained in given list."""
  stripeCustomerId_not_in: [String!]

  """All values less than the given value."""
  stripeCustomerId_lt: String

  """All values less than or equal the given value."""
  stripeCustomerId_lte: String

  """All values greater than the given value."""
  stripeCustomerId_gt: String

  """All values greater than or equal the given value."""
  stripeCustomerId_gte: String

  """All values containing the given string."""
  stripeCustomerId_contains: String

  """All values not containing the given string."""
  stripeCustomerId_not_contains: String

  """All values starting with the given string."""
  stripeCustomerId_starts_with: String

  """All values not starting with the given string."""
  stripeCustomerId_not_starts_with: String

  """All values ending with the given string."""
  stripeCustomerId_ends_with: String

  """All values not ending with the given string."""
  stripeCustomerId_not_ends_with: String
  stripeBillingSessionUrl: String

  """All values that are not equal to given value."""
  stripeBillingSessionUrl_not: String

  """All values that are contained in given list."""
  stripeBillingSessionUrl_in: [String!]

  """All values that are not contained in given list."""
  stripeBillingSessionUrl_not_in: [String!]

  """All values less than the given value."""
  stripeBillingSessionUrl_lt: String

  """All values less than or equal the given value."""
  stripeBillingSessionUrl_lte: String

  """All values greater than the given value."""
  stripeBillingSessionUrl_gt: String

  """All values greater than or equal the given value."""
  stripeBillingSessionUrl_gte: String

  """All values containing the given string."""
  stripeBillingSessionUrl_contains: String

  """All values not containing the given string."""
  stripeBillingSessionUrl_not_contains: String

  """All values starting with the given string."""
  stripeBillingSessionUrl_starts_with: String

  """All values not starting with the given string."""
  stripeBillingSessionUrl_not_starts_with: String

  """All values ending with the given string."""
  stripeBillingSessionUrl_ends_with: String

  """All values not ending with the given string."""
  stripeBillingSessionUrl_not_ends_with: String
  stripeCheckoutSessionId: String

  """All values that are not equal to given value."""
  stripeCheckoutSessionId_not: String

  """All values that are contained in given list."""
  stripeCheckoutSessionId_in: [String!]

  """All values that are not contained in given list."""
  stripeCheckoutSessionId_not_in: [String!]

  """All values less than the given value."""
  stripeCheckoutSessionId_lt: String

  """All values less than or equal the given value."""
  stripeCheckoutSessionId_lte: String

  """All values greater than the given value."""
  stripeCheckoutSessionId_gt: String

  """All values greater than or equal the given value."""
  stripeCheckoutSessionId_gte: String

  """All values containing the given string."""
  stripeCheckoutSessionId_contains: String

  """All values not containing the given string."""
  stripeCheckoutSessionId_not_contains: String

  """All values starting with the given string."""
  stripeCheckoutSessionId_starts_with: String

  """All values not starting with the given string."""
  stripeCheckoutSessionId_not_starts_with: String

  """All values ending with the given string."""
  stripeCheckoutSessionId_ends_with: String

  """All values not ending with the given string."""
  stripeCheckoutSessionId_not_ends_with: String
  stripeCustomerBalance: Float

  """All values that are not equal to given value."""
  stripeCustomerBalance_not: Float

  """All values that are contained in given list."""
  stripeCustomerBalance_in: [Float!]

  """All values that are not contained in given list."""
  stripeCustomerBalance_not_in: [Float!]

  """All values less than the given value."""
  stripeCustomerBalance_lt: Float

  """All values less than or equal the given value."""
  stripeCustomerBalance_lte: Float

  """All values greater than the given value."""
  stripeCustomerBalance_gt: Float

  """All values greater than or equal the given value."""
  stripeCustomerBalance_gte: Float
  cookieToken: String

  """All values that are not equal to given value."""
  cookieToken_not: String

  """All values that are contained in given list."""
  cookieToken_in: [String!]

  """All values that are not contained in given list."""
  cookieToken_not_in: [String!]

  """All values less than the given value."""
  cookieToken_lt: String

  """All values less than or equal the given value."""
  cookieToken_lte: String

  """All values greater than the given value."""
  cookieToken_gt: String

  """All values greater than or equal the given value."""
  cookieToken_gte: String

  """All values containing the given string."""
  cookieToken_contains: String

  """All values not containing the given string."""
  cookieToken_not_contains: String

  """All values starting with the given string."""
  cookieToken_starts_with: String

  """All values not starting with the given string."""
  cookieToken_not_starts_with: String

  """All values ending with the given string."""
  cookieToken_ends_with: String

  """All values not ending with the given string."""
  cookieToken_not_ends_with: String
  featureComments_every: FeatureCommentWhereInput
  featureComments_some: FeatureCommentWhereInput
  featureComments_none: FeatureCommentWhereInput
  upvotedStories_every: StoryWhereInput
  upvotedStories_some: StoryWhereInput
  upvotedStories_none: StoryWhereInput
  referredBy: UserWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  stripeCustomerId: String
}
