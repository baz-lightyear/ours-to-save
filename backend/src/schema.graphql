type Mutation {
    createStory(title: String!, content: String!, address: String!, morality: String, author: String, interestedInFeatureEmail: String, image: String): Story
}

type Query {
    stories(where: StoryWhereInput, orderBy: StoryOrderByInput): [Story]!
    story(id: ID!): Story
    features: [Feature]!
    feature(id: ID!): Feature
}

type Story {
    id: ID
    title: String
    content: String
    morality: String
    longitude: Float
    latitude: Float
    createdAt: String
    author: String
    interestedInFeatureEmail: String
    image: String
}

type Feature {
  id: ID! 
  title: String!
  subtitle: String
  featureLinks: [FeatureLink] 
  paragraphs: [Paragraph] 
  createdAt: String
  author: String
  bio: String
}

type FeatureLink {
  id: ID! 
  ref: String
  title: String
}

type Paragraph {
  id: ID!
  text: String
  image: String
  index: Int
}


enum StoryOrderByInput {
  createdAt_DESC
}

input StoryWhereInput {
  approved: Boolean
}